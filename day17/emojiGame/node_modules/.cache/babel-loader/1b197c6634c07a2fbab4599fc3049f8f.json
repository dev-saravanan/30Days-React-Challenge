{"ast":null,"code":"var _jsxFileName = \"/home/workspace/reactjs/coding-practices/emojiGame/src/components/EmojiGame/index.js\";\n/* \nQuick Tip \n\n- Use the below function in the EmojiGame Component to shuffle the emojisList every time when an emoji is clicked.\n\nconst shuffledEmojisList = () => {\n  const {emojisList} = this.props\n  return emojisList.sort(() => Math.random() - 0.5)\n}\n\n*/\n\n// Write your code here.\n\nimport { Component } from 'react';\nimport NavBar from '../NavBar';\nimport './index.css';\nimport EmojiCard from '../EmojiCard';\nimport WinOrLoseCard from '../WinOrLoseCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EmojiGame extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedEmojis: [],\n      emojiExists: false,\n      score: 0,\n      topScore: 0\n    };\n    this.onSelectEmoji = emojiId => {\n      const {\n        emojisList\n      } = this.props;\n      const {\n        selectedEmojis,\n        score,\n        topScore\n      } = this.state;\n      const currentEmoji = emojisList.find(eachEmoji => eachEmoji.id === emojiId);\n      console.log(currentEmoji);\n      if (selectedEmojis.includes(currentEmoji)) {\n        this.setState({\n          selectedEmojis: [],\n          emojiExists: true,\n          score: 0\n        });\n      } else {\n        const updatedTopScore = topScore < score ? topScore + 1 : topScore;\n        this.setState(prevState => ({\n          selectedEmojis: {\n            ...prevState.selectedEmojis,\n            currentEmoji\n          },\n          score: prevState.score + 1,\n          topScore: updatedTopScore\n        }));\n      }\n    };\n  }\n  render() {\n    const {\n      score,\n      topScore\n    } = this.state;\n    const shuffledEmojisList = () => {\n      const {\n        emojisList\n      } = this.props;\n      return emojisList.sort(() => Math.random() - 0.5);\n    };\n    const renderEmojis = () => {\n      const emojiList = shuffledEmojisList();\n      return emojiList.map(eachEmoji => /*#__PURE__*/_jsxDEV(EmojiCard, {\n        emojiDetails: eachEmoji,\n        onSelectEmoji: this.onSelectEmoji\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this));\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-bg-container\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        score: score,\n        topScore: topScore\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-container\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"emojis-container\",\n          children: renderEmojis()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default EmojiGame;","map":{"version":3,"names":["Component","NavBar","EmojiCard","WinOrLoseCard","jsxDEV","_jsxDEV","EmojiGame","constructor","args","state","selectedEmojis","emojiExists","score","topScore","onSelectEmoji","emojiId","emojisList","props","currentEmoji","find","eachEmoji","id","console","log","includes","setState","updatedTopScore","prevState","render","shuffledEmojisList","sort","Math","random","renderEmojis","emojiList","map","emojiDetails","fileName","_jsxFileName","lineNumber","columnNumber","className","children"],"sources":["/home/workspace/reactjs/coding-practices/emojiGame/src/components/EmojiGame/index.js"],"sourcesContent":["/* \nQuick Tip \n\n- Use the below function in the EmojiGame Component to shuffle the emojisList every time when an emoji is clicked.\n\nconst shuffledEmojisList = () => {\n  const {emojisList} = this.props\n  return emojisList.sort(() => Math.random() - 0.5)\n}\n\n*/\n\n// Write your code here.\n\nimport {Component} from 'react'\n\nimport NavBar from '../NavBar'\n\nimport './index.css'\nimport EmojiCard from '../EmojiCard'\nimport WinOrLoseCard from '../WinOrLoseCard'\n\nclass EmojiGame extends Component {\n  state = {selectedEmojis: [], emojiExists: false, score: 0, topScore: 0}\n\n  onSelectEmoji = emojiId => {\n    const {emojisList} = this.props\n    const {selectedEmojis, score, topScore} = this.state\n\n    const currentEmoji = emojisList.find(eachEmoji => eachEmoji.id === emojiId)\n\n    console.log(currentEmoji)\n\n    if (selectedEmojis.includes(currentEmoji)) {\n      this.setState({selectedEmojis: [], emojiExists: true, score: 0})\n    } else {\n      const updatedTopScore = topScore < score ? topScore + 1 : topScore\n\n      this.setState(prevState => ({\n        selectedEmojis: {...prevState.selectedEmojis, currentEmoji},\n        score: prevState.score + 1,\n        topScore: updatedTopScore,\n      }))\n    }\n  }\n\n  render() {\n    const {score, topScore} = this.state\n\n    const shuffledEmojisList = () => {\n      const {emojisList} = this.props\n      return emojisList.sort(() => Math.random() - 0.5)\n    }\n\n    const renderEmojis = () => {\n      const emojiList = shuffledEmojisList()\n\n      return emojiList.map(eachEmoji => (\n        <EmojiCard\n          emojiDetails={eachEmoji}\n          onSelectEmoji={this.onSelectEmoji}\n        />\n      ))\n    }\n\n    return (\n      <div className=\"main-bg-container\">\n        <NavBar score={score} topScore={topScore} />\n        <div className=\"content-container\">\n          <ul className=\"emojis-container\">{renderEmojis()}</ul>\n          {/* <WinOrLoseCard /> */}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default EmojiGame\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}